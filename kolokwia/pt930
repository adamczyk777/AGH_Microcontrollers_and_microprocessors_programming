<------	ZASADY:	----->
#1. Wklejamy tylko działający kod
#2. Jeśli ktoś pisze/edytuje kod, nie przeszkadzamy mu
#3. Jeśli edytujemy czyjś kod, możemy albo komentować albo przekopiować całą funkcję na nowo i zamienić odpowiednie elementy
#4. Jeśli ktoś skończy pierwszy, wkleja cały działający program, zostawiając odpowiedni komentarz
#5. Jeśli kopiujemy kod od kogoś, mamy OBOWIĄZEK go zrefaktoryzować!
#6. Działające funkcje (ewentualnie jeśli tworzymy ja tutaj to przed funkcją), należy opisać krótkim komentarzem (lub dać jednoznaczną nazwę)
#7. Jeśli ktoś już wkleił w pełni działający kod, a też mamy działający lub mamy pytania, możemy stosownie oddzielić kod jakimś ciągiem zakomentowanych znaków i wkleić pod spodem swój kod lub pytania.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#	<------	C:	----->
	include <stdio.h>
	include <stdlib.h>

	// Assembly function
	void func_name();

	void main( void )
		{
 			//body
		}



#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#	<------	ASSEMBLER:	----->
	.data
	.text
	.global _start

#--------------------------------
#	Function:	func_name
#	Parameters:	?

	.type func_name,@function
func_name:
	RET	
    
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^	Działa dla podstawowej wersji
# Dla ewentualnego bezpieczenstwa usuwam autora ;) I tak pamietam kim jestes :D Ale zeby nikt tego nie przekopiowal i nie zostawil... Adam Małysz?

# long int sum_expr(int *tabA, int *tabB, int n, int operation );
#                   %rdi        %rsi       %rdx     %rcx

.text
.type sum_expr ,@function
.global sum_expr



sum_expr:
    push    %rdi
    push    %rsi
#r15 i r14 powinno byc chyba najpierw spushowane na stos. to sa zakazane rejestry / To jak to bys zrobił?/ wrzucasz na stos przed pierwszym użyciem, a przed koncem programu zdejmujesz funkcje push i pop

    xor     %r15, %r15  # licznik petli
    xor     %r14, %r14  # wskaznik drogi

    mov     %rdx, %r8   # przeniesienie bo mnozenie

    xor     %r10, %r10  # przechowanie sumy
    xor     %rax, %rax

s:      # sprawdzanie operatora
    cmp     $0, %rcx    
    je      op_0



op_0:   # ustawienie odpowiednio wskazników
    mov     $0, %r15
    mov     %r8, %r14
    sub     $1, %r14

petla:
    cmp     %r8, %r15
    je      end

    xor     %edx,%edx   # czyszczenie bo edx:eax przy mnozeniu
    xor     %eax, %eax  # rejestr z wynikiem
    movl    (%rdi, %r15, 4), %eax   # przenoszenie z list
    movl    (%rsi, %r14, 4), %r9d
    mul     %r9d

    add     %eax, %r10d # sumowanie

next_petla: # przygotowanie do nastepnej petli
    inc     %r15
    dec     %r14

    jmp     petla


end:
    pop     %rsi
    pop     %rdi
    mov     %r10, %rax  # przeniesienie do wartosci zwracanej
    ret


    
    
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#	<------	KOMENTARZE:	----->
# Na jakich rejestrach wykonuje się mnożenie? 
# Było, użyj opcji szukaj.
 
<------------------------------------------------------------------>
ZADANIE:
long int sum_expr(int *tabA, int *tabB, int n, int operation );

//---------------------------------------------------------------
// funkcja wyznacza sumę wyrażeń których postać zależy od parametru
// operation. W wyrażeniach pojawiają się elementy tablic tabA i tabB
// - obie tablice mają ten sam rozmiar.
//
// Parametry:
//    tabA    - tablica (wektor) liczb
//    tabB    - tablica (wektor) liczb
//    n       - liczba elementów tablic (rozmiar tablicy)
//    operation - parametr określający postać sumowanych wyrażeń
//                 0 = sum i=0..n-1 tabA[i] * tabB[n-i-1]
//                 1 = sum i=0..n-1 tabA[i] * tabB[i]
//                 2 = sum i=0..n-1 tabA[i] - tabB[n-i-1]
//                 3 = sum i=0..n-1 tabA[i] - tabB[i]
//
// Wersja minimum : prawidłowe działanie dla operation = 0
//---------------------------------------------------------------
 
int main(){
    int tabA[] = {0,1,2,3,4,5,6,7,8,9};
    int tabB[] = {9,8,7,6,5,4,3,2,1,0};
    int n = 10;
    int operation = 0;
    int i;

    printf("Tab size = %d\n", n );
    for( i = 0; i < n; i++)
      printf("TabA[%2d] = %d  TabB[%2d] = %d\n", i, tabA[i], i, tabB[i] );
    printf("Operation = %d\n", operation );
    printf("Sum of expressions  = %ld\n", sum_expr( tabA, tabB, n, operation ) );
    return 0;
}
  
  //wersja minumum prosto z kompilatora online
  
  sum_expr:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        movl    %edx, -36(%rbp)
        movl    %ecx, -40(%rbp)
        movq    $0, -8(%rbp)
        movl    $0, -12(%rbp)
        cmpl    $0, -40(%rbp)
        jne     .L2
        jmp     .L3
.L4:
        movl    -12(%rbp), %eax
        cltq
        leaq    0(,%rax,4), %rdx
        movq    -24(%rbp), %rax
        addq    %rdx, %rax
        movl    (%rax), %edx
        movl    -36(%rbp), %eax
        subl    -12(%rbp), %eax
        cltq
        salq    $2, %rax
        leaq    -4(%rax), %rcx
        movq    -32(%rbp), %rax
        addq    %rcx, %rax
        movl    (%rax), %eax
        imull   %edx, %eax
        cltq
        addq    %rax, -8(%rbp)
.L3:
        movl    -12(%rbp), %eax
        leal    1(%rax), %edx
        movl    %edx, -12(%rbp)
        cmpl    %eax, -36(%rbp)
        jg      .L4
.L2:
        movq    -8(%rbp), %rax
        popq    %rbp
        ret
        
        
        
        
        
  <!-- Dziłjąca wersja peał--- >
operacja_jeden.type sum_expr, @function
.global sum_expr

.text
operacja:
  .quad operacja_zero, operacja_jeden, operacja_dwa, operacj_trzy
sum_expr:
  push %r12
  push %r13
  MOVQ $0, %rax
  MOVQ $-1, %r12
loop:
  INCQ %r12
  CMPL %r12d, %edx
  JLE koniec
  MOVL (%rdi,%r12,4), %r13d
  JMP *operacja(,%ecx,8)

  operacja_zero:
  MOVL %edx, %r10d
  DECL %r10d
  SUBL %r12d, %r10d
  MOVL (%rsi,%r10,4), %r11d
  IMULQ %r11, %r13
  ADDQ %r13, %rax
  JMP loop

  operacja_jeden:

  MOVL (%rsi,%r12,4), %r11d
  IMULQ %r11, %r13
  ADDQ %r13, %rax
  JMP loop

  operacja_dwa:
  MOVL %edx, %r10d
  DECL %r10d
  SUBL %r12d, %r10d
  MOVL (%rsi,%r10,4), %r11d
  SUBQ %r11, %r13
  ADDQ %r13, %rax
  JMP loop

  operacj_trzy:
  MOVL (%rsi,%r12,4), %r11d
  SUBQ %r11, %r13
  ADDQ %r13, %rax
  JMP loop



koniec:
  pop %r13
  pop %r12
  ret

  
